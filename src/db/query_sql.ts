// Code generated by sqlc. DO NOT EDIT.

import { NeverChangeDB } from 'neverchange';

export const createProjectInDBQuery = `-- name: CreateProjectInDB :one
INSERT INTO projects (name) VALUES (?) RETURNING id, name, created_at`;

export interface CreateProjectInDBArgs {
  name: string;
}

export interface CreateProjectInDBRow {
  id: number;
  name: string;
  createdAt: Date | null;
}

export async function createProjectInDB(
  db: NeverChangeDB,
  args: CreateProjectInDBArgs,
): Promise<CreateProjectInDBRow | null> {
  const result = await db.query(createProjectInDBQuery, [args.name]);
  return result[0];
}

export const getProjectsInDBQuery = `-- name: GetProjectsInDB :many
SELECT id, name, created_at FROM projects ORDER BY created_at DESC`;

export interface GetProjectsInDBRow {
  id: number;
  name: string;
  createdAt: Date | null;
}

export async function getProjectsInDB(
  db: NeverChangeDB,
): Promise<GetProjectsInDBRow[]> {
  return await db.query(getProjectsInDBQuery, []);
}

export const getProjectInDBQuery = `-- name: GetProjectInDB :one
SELECT id, name, created_at FROM projects WHERE id = ? LIMIT 1`;

export interface GetProjectInDBArgs {
  id: number;
}

export interface GetProjectInDBRow {
  id: number;
  name: string;
  createdAt: Date | null;
}

export async function getProjectInDB(
  db: NeverChangeDB,
  args: GetProjectInDBArgs,
): Promise<GetProjectInDBRow | null> {
  const result = await db.query(getProjectInDBQuery, [args.id]);
  return result[0];
}

export const updateProjectInDBQuery = `-- name: UpdateProjectInDB :exec
UPDATE projects SET name = ? WHERE id = ?`;

export interface UpdateProjectInDBArgs {
  name: string;
  id: number;
}

export async function updateProjectInDB(
  db: NeverChangeDB,
  args: UpdateProjectInDBArgs,
): Promise<void> {
  await db.execute(updateProjectInDBQuery, [args.name, args.id]);
}

export const deleteProjectInDBQuery = `-- name: DeleteProjectInDB :exec
DELETE FROM projects WHERE id = ?`;

export interface DeleteProjectInDBArgs {
  id: number;
}

export async function deleteProjectInDB(
  db: NeverChangeDB,
  args: DeleteProjectInDBArgs,
): Promise<void> {
  await db.execute(deleteProjectInDBQuery, [args.id]);
}

export const createTodoInDBQuery = `-- name: CreateTodoInDB :exec
INSERT INTO todos (text, project_id) VALUES (?, ?)`;

export interface CreateTodoInDBArgs {
  text: string;
  projectId: number | null;
}

export async function createTodoInDB(
  db: NeverChangeDB,
  args: CreateTodoInDBArgs,
): Promise<void> {
  await db.execute(createTodoInDBQuery, [args.text, args.projectId]);
}

export const createChildTodoInDBQuery = `-- name: CreateChildTodoInDB :exec
INSERT INTO todos (text, project_id, parent_id) VALUES (?, ?, ?)`;

export interface CreateChildTodoInDBArgs {
  text: string;
  projectId: number | null;
  parentId: number | null;
}

export async function createChildTodoInDB(
  db: NeverChangeDB,
  args: CreateChildTodoInDBArgs,
): Promise<void> {
  await db.execute(createChildTodoInDBQuery, [
    args.text,
    args.projectId,
    args.parentId,
  ]);
}

export const getTodosInDBQuery = `-- name: GetTodosInDB :many
SELECT id, project_id, parent_id, text, completed, deleted, created_at FROM todos WHERE project_id = ? AND deleted = 0 ORDER BY created_at DESC`;

export interface GetTodosInDBArgs {
  projectId: number | null;
}

export interface GetTodosInDBRow {
  id: number;
  projectId: number | null;
  parentId: number | null;
  text: string;
  completed: boolean;
  deleted: boolean;
  createdAt: Date | null;
}

export async function getTodosInDB(
  db: NeverChangeDB,
  args: GetTodosInDBArgs,
): Promise<GetTodosInDBRow[]> {
  return await db.query(getTodosInDBQuery, [args.projectId]);
}

export const getChildTodosInDBQuery = `-- name: GetChildTodosInDB :many
SELECT id, project_id, parent_id, text, completed, deleted, created_at FROM todos WHERE project_id = ? AND parent_id = ? AND deleted = 0 ORDER BY created_at DESC`;

export interface GetChildTodosInDBArgs {
  projectId: number | null;
  parentId: number | null;
}

export interface GetChildTodosInDBRow {
  id: number;
  projectId: number | null;
  parentId: number | null;
  text: string;
  completed: boolean;
  deleted: boolean;
  createdAt: Date | null;
}

export async function getChildTodosInDB(
  db: NeverChangeDB,
  args: GetChildTodosInDBArgs,
): Promise<GetChildTodosInDBRow[]> {
  return await db.query(getChildTodosInDBQuery, [
    args.projectId,
    args.parentId,
  ]);
}

export const getTodoInDBQuery = `-- name: GetTodoInDB :one
SELECT id, project_id, parent_id, text, completed, deleted, created_at FROM todos WHERE id = ? LIMIT 1`;

export interface GetTodoInDBArgs {
  id: number;
}

export interface GetTodoInDBRow {
  id: number;
  projectId: number | null;
  parentId: number | null;
  text: string;
  completed: boolean;
  deleted: boolean;
  createdAt: Date | null;
}

export async function getTodoInDB(
  db: NeverChangeDB,
  args: GetTodoInDBArgs,
): Promise<GetTodoInDBRow | null> {
  const result = await db.query(getTodoInDBQuery, [args.id]);
  return result[0];
}

export const toggleTodoInDBQuery = `-- name: ToggleTodoInDB :exec
UPDATE todos SET completed = NOT completed WHERE id = ?`;

export interface ToggleTodoInDBArgs {
  id: number;
}

export async function toggleTodoInDB(
  db: NeverChangeDB,
  args: ToggleTodoInDBArgs,
): Promise<void> {
  await db.execute(toggleTodoInDBQuery, [args.id]);
}

export const updateTodoInDBQuery = `-- name: UpdateTodoInDB :exec
UPDATE todos SET text = ? WHERE id = ?`;

export interface UpdateTodoInDBArgs {
  text: string;
  id: number;
}

export async function updateTodoInDB(
  db: NeverChangeDB,
  args: UpdateTodoInDBArgs,
): Promise<void> {
  await db.execute(updateTodoInDBQuery, [args.text, args.id]);
}

export const moveTodoInDBQuery = `-- name: MoveTodoInDB :exec
UPDATE todos SET project_id = ?, parent_id = ? WHERE id = ?`;

export interface MoveTodoInDBArgs {
  projectId: number | null;
  parentId: number | null;
  id: number;
}

export async function moveTodoInDB(
  db: NeverChangeDB,
  args: MoveTodoInDBArgs,
): Promise<void> {
  await db.execute(moveTodoInDBQuery, [args.projectId, args.parentId, args.id]);
}

export const deleteTodoInDBQuery = `-- name: DeleteTodoInDB :exec
UPDATE todos SET deleted = 1 WHERE id = ?`;

export interface DeleteTodoInDBArgs {
  id: number;
}

export async function deleteTodoInDB(
  db: NeverChangeDB,
  args: DeleteTodoInDBArgs,
): Promise<void> {
  await db.execute(deleteTodoInDBQuery, [args.id]);
}

export const deleteProjectTodosInDBQuery = `-- name: DeleteProjectTodosInDB :exec
UPDATE todos SET deleted = 1 WHERE project_id = ?`;

export interface DeleteProjectTodosInDBArgs {
  projectId: number | null;
}

export async function deleteProjectTodosInDB(
  db: NeverChangeDB,
  args: DeleteProjectTodosInDBArgs,
): Promise<void> {
  await db.execute(deleteProjectTodosInDBQuery, [args.projectId]);
}
